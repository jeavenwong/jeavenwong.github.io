<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>阿里巴巴 dubbo RPC分布式框架初体验</title>
    <url>/2020/07/05/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4-dubbo-RPC%E5%88%86%E5%B8%83%E5%BC%8F%E6%A1%86%E6%9E%B6%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<p>最近写了一个秒杀系统，主要使用 Spring Boot，用到了微服务的思想。之前简单学过丁雪丰老师的 Spring 全家桶课程，初步认识了 Spring Cloud Netflix OSS ，感觉使用起来非常顺滑，但是很多组件 Netflix 也已经不维护了。阿里在开源上是花了很大精力的，Dubbo 作为阿里比较早的开源项目，虽然之前一直被边缘化，但是随着 Spring Cloud Alibaba 的兴起，Dubbo 也和 Spring Cloud 结合的更加紧密。（PS: Dubbo 使用起来确实没有 Spring Cloud 一站式服务方便）</p>
<a id="more"></a>

<p>Dubbo 阿里已经捐给了  Apache 基金会，作为顶级开源项目 Apache Dubbo 来维护。同时阿里还有自己维护的开源项目 Alibaba Dubbo，我使用的就是 Alibaba Dubbo。</p>
<h5 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h5><ul>
<li>OS: Windows10</li>
<li>IDE: Intellij IDEA 2018.2</li>
<li>Build: Maven 3.3.9</li>
<li>Framework: Spring Boot 2.0.1.RELEASE (内嵌Tomcat)</li>
<li>主要组件：ZooKeeper 3.4.6（注册中心），Dubbo 2.6.8，Dubbo Admin 2.6.x</li>
<li>调试工具: Postman </li>
</ul>
<h5 id="样例程序编写"><a href="#样例程序编写" class="headerlink" title="样例程序编写"></a>样例程序编写</h5><p>程序提供应用和服务消费应用均采用内置的 Tomcat，直接在 debug 模式下以可执行 jar 包运行。</p>
<p>创建空的 maven 项目，项目的结构如下图所示，一个父模块 + 三个子模块（提供者模块、消费者模块、公共API模块）。</p>
<p><img src="/2020/07/05/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4-dubbo-RPC%E5%88%86%E5%B8%83%E5%BC%8F%E6%A1%86%E6%9E%B6%E5%88%9D%E4%BD%93%E9%AA%8C/structure.JPG" alt="structure"></p>
<p>API模块的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>DemoDubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jeaven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ServiceInterface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>API模块的接口</p>
<p>消费者接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jeaven.api.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jeaven.api.model.UserAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Jeaven Wong (Jianwei Wang)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/4 23:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化订单</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">initOrder</span><span class="params">(String userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务者接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jeaven.api.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jeaven.api.model.UserAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Jeaven Wong (Jianwei Wang)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/4 23:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//按照用户id返回所有的收货地址</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">getUserAddressList</span><span class="params">(String userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>API模块的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jeaven.api.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Jeaven Wong (Jianwei Wang)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/4 22:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//将提供方和消费方共同使用的POJO对象及接口抽离出来，减少代码冗余，接口实现放在其各自的包中。</span></span><br><span class="line"><span class="comment">//（将用户服务和订单服务都会用到的地址类提取出来，同时也把定义了获取地址方法的接口单独提取出来，共同放在一个API包中，</span></span><br><span class="line"><span class="comment">//消费方和提供方通过引入该API包，实现该包中的接口来定义各自获取地址的方法实现）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAddress</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String userAddress; <span class="comment">//用户地址</span></span><br><span class="line">    <span class="keyword">private</span> String userId; <span class="comment">//用户id</span></span><br><span class="line">    <span class="keyword">private</span> String consignee; <span class="comment">//收货人</span></span><br><span class="line">    <span class="keyword">private</span> String phoneNum; <span class="comment">//电话号码</span></span><br><span class="line">    <span class="keyword">private</span> String isDefault; <span class="comment">//是否为默认地址    Y-是     N-否</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>服务提供模块</p>
<p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>DemoDubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jeaven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Provider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--引入api接口模块--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jeaven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ServiceInterface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--引入springboot的相关依赖--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--引入dubbo的依赖--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/dubbo --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--springboot测试依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 添加一个依赖</span></span><br><span class="line"><span class="comment">        dubbo项目启动报错:</span></span><br><span class="line"><span class="comment">        java.lang.NoClassDefFoundError: io/netty/channel/nio/NioEventLoopGroup</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.32.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 添加一个依赖</span></span><br><span class="line"><span class="comment">       dubbo项目启动报错:</span></span><br><span class="line"><span class="comment">       java.lang.NoClassDefFoundError: org/apache/curator/framework/CuratorFrameworkFactory</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--为了使用telnet--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>Provider<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以默认配置方式配置dubbo，即 application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#当前服务/应用的名字</span></span><br><span class="line"><span class="meta">dubbo.application.name</span>=<span class="string">Provider</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注册中心的协议和地址</span></span><br><span class="line"><span class="meta">dubbo.registry.protocol</span>=<span class="string">zookeeper</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">127.0.0.1:2181</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#通信规则（通信协议和接口）</span></span><br><span class="line"><span class="meta">dubbo.protocol.name</span>=<span class="string">dubbo</span></span><br><span class="line"><span class="meta">dubbo.protocol.port</span>=<span class="string">20880</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#连接监控中心</span></span><br><span class="line"><span class="meta">dubbo.monitor.protocol</span>=<span class="string">registry</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#开启包扫描，可替代 @EnableDubbo 注解</span></span><br><span class="line"><span class="comment">##dubbo.scan.base-packages=com.jeaven</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#qos的配置</span></span><br><span class="line"><span class="meta">dubbo.application.qosEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">dubbo.application.qosPort</span>=<span class="string">22222</span></span><br><span class="line"><span class="meta">dubbo.application.qosAcceptForeignIp</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#内置tomcat端口号</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">9992</span></span><br></pre></td></tr></table></figure>

<p>配置 dubbo 的 log4j，即 log4j.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">INFO, stdout, D</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Console Appender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>= <span class="string">%d&#123;hh:mm:ss,SSS&#125; [%t] %-5p %c %x - %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Custom tweaks</span></span><br><span class="line"><span class="meta">log4j.logger.com.codahale.metrics</span>=<span class="string">WARN</span></span><br><span class="line"><span class="meta">log4j.logger.com.ryantenney</span>=<span class="string">WARN</span></span><br><span class="line"><span class="meta">log4j.logger.com.zaxxer</span>=<span class="string">WARN</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache</span>=<span class="string">WARN</span></span><br><span class="line"><span class="meta">log4j.logger.org.hibernate</span>=<span class="string">WARN</span></span><br><span class="line"><span class="meta">log4j.logger.org.hibernate.engine.internal</span>=<span class="string">WARN</span></span><br><span class="line"><span class="meta">log4j.logger.org.hibernate.validator</span>=<span class="string">WARN</span></span><br><span class="line"><span class="meta">log4j.logger.org.springframework</span>=<span class="string">WARN</span></span><br><span class="line"><span class="meta">log4j.logger.org.springframework.web</span>=<span class="string">WARN</span></span><br><span class="line"><span class="meta">log4j.logger.org.springframework.security</span>=<span class="string">WARN</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># log file</span></span><br><span class="line"><span class="meta">log4j.appender.D</span> = <span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.D.File</span> =<span class="string">C://Users//jeave//Desktop//test//provider.log</span></span><br><span class="line"><span class="meta">log4j.appender.D.Append</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.D.Threshold</span> = <span class="string">DEBUG </span></span><br><span class="line"><span class="meta">log4j.appender.D.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.D.layout.ConversionPattern</span> = <span class="string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jeaven.provider.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Jeaven Wong (Jianwei Wang)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/5 14:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:log4j.properties"</span>)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserService 接口实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jeaven.provider.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> com.jeaven.api.model.UserAddress;</span><br><span class="line"><span class="keyword">import</span> com.jeaven.api.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Jeaven Wong (Jianwei Wang)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/4 22:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Service</span>(timeout = <span class="number">3000</span>)  <span class="comment">//这个是dubbo的注解，用来暴露服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"><span class="comment">//    测试逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">getUserAddressList</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        UserAddress userAddress = <span class="keyword">new</span> UserAddress().builder().userId(userId).userAddress(<span class="string">"湖北襄阳"</span>)</span><br><span class="line">                .id(<span class="number">0</span>).consignee(<span class="string">"jeavenwong"</span>).phoneNum(<span class="string">"188XXXXXXXX"</span>)</span><br><span class="line">                .isDefault(<span class="string">"Y"</span>).build();</span><br><span class="line">        List&lt;UserAddress&gt; resList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        resList.add(userAddress);</span><br><span class="line">        <span class="keyword">return</span> resList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jeaven.provider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.spring.context.annotation.EnableDubbo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Jeaven Wong (Jianwei Wang)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/4 22:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubbo</span> <span class="comment">// 开启基于注解的dubbo功能（主要是包扫描@DubboComponentScan）,也可以在配置文件中使用dubbo.scan.base-package来替代   @EnableDubbo</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProviderApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务消费模块</p>
<p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>DemoDubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jeaven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--引入api接口模块--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jeaven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ServiceInterface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--引入springboot的相关依赖--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--引入dubbo的依赖--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/dubbo --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--springboot测试依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.32.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--为了使用telnet--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>Consumer<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>同理，配置 dubbo</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#避免和监控中心端口冲突，设为 tomcat 8081端口访问</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">9991</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#下面是dubbo的配置</span></span><br><span class="line"><span class="meta">dubbo.application.name</span>=<span class="string">Consumer</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">zookeeper://127.0.0.1:2181</span></span><br><span class="line"><span class="meta">dubbo.monitor.protocol</span>=<span class="string">registry</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#qos的配置</span></span><br><span class="line"><span class="comment">#dubbo.application.qos.enable=true</span></span><br><span class="line"><span class="comment">#dubbo.application.qos.port=33333</span></span><br><span class="line"><span class="comment">#dubbo.application.qos.accept.foreign.ip=true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">dubbo.application.qosEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">dubbo.application.qosPort</span>=<span class="string">33333</span></span><br><span class="line"><span class="meta">dubbo.application.qosAcceptForeignIp</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<p>同理，配置日志</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">INFO, stdout, D</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Console Appender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>= <span class="string">%d&#123;hh:mm:ss,SSS&#125; [%t] %-5p %c %x - %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Custom tweaks</span></span><br><span class="line"><span class="meta">log4j.logger.com.codahale.metrics</span>=<span class="string">WARN</span></span><br><span class="line"><span class="meta">log4j.logger.com.ryantenney</span>=<span class="string">WARN</span></span><br><span class="line"><span class="meta">log4j.logger.com.zaxxer</span>=<span class="string">WARN</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache</span>=<span class="string">WARN</span></span><br><span class="line"><span class="meta">log4j.logger.org.hibernate</span>=<span class="string">WARN</span></span><br><span class="line"><span class="meta">log4j.logger.org.hibernate.engine.internal</span>=<span class="string">WARN</span></span><br><span class="line"><span class="meta">log4j.logger.org.hibernate.validator</span>=<span class="string">WARN</span></span><br><span class="line"><span class="meta">log4j.logger.org.springframework</span>=<span class="string">WARN</span></span><br><span class="line"><span class="meta">log4j.logger.org.springframework.web</span>=<span class="string">WARN</span></span><br><span class="line"><span class="meta">log4j.logger.org.springframework.security</span>=<span class="string">WARN</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># log file</span></span><br><span class="line"><span class="meta">log4j.appender.D</span> = <span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.D.File</span> =<span class="string">C://Users//jeave//Desktop//test//consumer.log</span></span><br><span class="line"><span class="meta">log4j.appender.D.Append</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.D.Threshold</span> = <span class="string">DEBUG </span></span><br><span class="line"><span class="meta">log4j.appender.D.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.D.layout.ConversionPattern</span> = <span class="string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span></span><br></pre></td></tr></table></figure>

<p>测试用的 Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jeaven.consumer.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jeaven.api.model.UserAddress;</span><br><span class="line"><span class="keyword">import</span> com.jeaven.api.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Jeaven Wong (Jianwei Wang)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/5 8:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/initOrder"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">getService</span><span class="params">(@RequestParam(<span class="string">"uid"</span>)</span> String uid) </span>&#123;</span><br><span class="line">        List&lt;UserAddress&gt; res = orderService.initOrder(uid);</span><br><span class="line">        log.info(<span class="string">"返回的数据是: &#123;&#125;"</span>, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/test"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"hello.wrold....."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello.wrold..."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现 OrderService 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jeaven.consumer.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.jeaven.api.model.UserAddress;</span><br><span class="line"><span class="keyword">import</span> com.jeaven.api.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> com.jeaven.api.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Jeaven Wong (Jianwei Wang)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/5 8:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>  <span class="comment">// 注意这个是 spring 的注解，不是 dubbo 的，搞错了这个 debug 了好久</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;  <span class="comment">// 调用远程服务</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserAddress&gt; <span class="title">initOrder</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUserAddressList(userId);</span><br><span class="line"><span class="comment">//        UserAddress userAddress = new UserAddress().builder().isDefault("Y").phoneNum("188XXXXXXXX").consignee("jeavenwong")</span></span><br><span class="line"><span class="comment">//                .userId(userId).id(1).userAddress("hubei xiangyang").build();</span></span><br><span class="line"><span class="comment">//        List&lt;UserAddress&gt; list = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        list.add(userAddress);</span></span><br><span class="line"><span class="comment">//        return list;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jeaven.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.spring.context.annotation.EnableDubbo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Jeaven Wong (Jianwei Wang)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/4 23:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication<span class="class">.<span class="keyword">class</span>,  <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后，直接在 IDEA 里面使用 Maven clean package 进行编译，在主程序类上鼠标右键选择debug模式运行即可。无需再使用外置的 Servlet 容器。</p>
<h5 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h5><p>运行的时候先开启 ZooKeeper， 双击 bin 目录下的Zserver.md 即可开启服务。</p>
<p>然后开启 Dubbo Admin 组件，我选择的是 2.6.x 的老版本，这个版本是使用 Spring Boot + Volecity 服务端模板写的，所以使用 IDEA  Maven 编译起来非常方便，而新的版本采用了前后分离的技术，前端使用 Vue.js，后端时Sping Boot，所以使用需要用 npm 编译前端，用 Maven 编译后端，易用性不高。</p>
<p>我 fork 的 Dubbo Admin 库地址是: <a href="https://gitee.com/jeavenwong/dubbo-admin" target="_blank" rel="noopener">https://gitee.com/jeavenwong/dubbo-admin</a></p>
<p>直接 git clone 到本地，然后修改配置文件再变异成可执行 jar 包运行即可。</p>
<p>可以参考博客: <a href="https://www.cnblogs.com/zjfjava/p/9694540.html" target="_blank" rel="noopener">https://www.cnblogs.com/zjfjava/p/9694540.html</a></p>
<h5 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h5><p>Postman get请求截图</p>
<p><img src="/2020/07/05/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4-dubbo-RPC%E5%88%86%E5%B8%83%E5%BC%8F%E6%A1%86%E6%9E%B6%E5%88%9D%E4%BD%93%E9%AA%8C/res1.JPG" alt="res1"></p>
<p>Dubbo Admin 运行截图</p>
<p><img src="/2020/07/05/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4-dubbo-RPC%E5%88%86%E5%B8%83%E5%BC%8F%E6%A1%86%E6%9E%B6%E5%88%9D%E4%BD%93%E9%AA%8C/res2.JPG" alt="res2"></p>
<p>因为服务提供者和服务消费者都开启了监控，所以显示了三个服务消费者</p>
<p><img src="/2020/07/05/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4-dubbo-RPC%E5%88%86%E5%B8%83%E5%BC%8F%E6%A1%86%E6%9E%B6%E5%88%9D%E4%BD%93%E9%AA%8C/res3.JPG" alt="res3"></p>
<p>服务提供者只有一个</p>
<p><img src="/2020/07/05/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4-dubbo-RPC%E5%88%86%E5%B8%83%E5%BC%8F%E6%A1%86%E6%9E%B6%E5%88%9D%E4%BD%93%E9%AA%8C/res4.JPG" alt="res4"></p>
<p>但是遗憾的是我没有运行成功 dubbo-monitor-simple ，不能在界面 UI 上显示出服务的调用次数和时间。</p>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><ol>
<li><a href="http://dubbo.apache.org/zh-cn/docs/user/configuration/annotation.html" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/docs/user/configuration/annotation.html</a></li>
<li><a href="https://www.cnblogs.com/zjfjava/p/9696086.html#top" target="_blank" rel="noopener">https://www.cnblogs.com/zjfjava/p/9696086.html#top</a></li>
<li><a href="https://blog.csdn.net/csonst1017/article/details/100555291" target="_blank" rel="noopener">https://blog.csdn.net/csonst1017/article/details/100555291</a></li>
<li><a href="https://www.cnblogs.com/zjfjava/p/9694540.html" target="_blank" rel="noopener">https://www.cnblogs.com/zjfjava/p/9694540.html</a></li>
</ol>
<h5 id="程序-Demo-地址"><a href="#程序-Demo-地址" class="headerlink" title="程序 Demo 地址"></a>程序 Demo 地址</h5><p><a href="https://gitee.com/jeavenwong/DubboDemo" target="_blank" rel="noopener">https://gitee.com/jeavenwong/DubboDemo</a></p>
]]></content>
  </entry>
  <entry>
    <title>springboot2.x内置tomcat的配置方式</title>
    <url>/2020/07/05/springboot2-x%E5%86%85%E7%BD%AEtomcat%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>因为开发过程中，使用本地的Tomcat，总是出现各种各样奇怪的错误。既然使用了Spring Boot 2.x，那打包成可执行 jar 包不香吗？当然，可执行 jar 包里面使用的是 sripng-boot-starter-web 起步依赖引入的众多依赖中的内嵌 Tomcat。</p>
<a id="more"></a> 

<p>简单记录下两种配置 Spring Boot 内嵌 Tomcat 的方式。</p>
<h5 id="一、使用-springboot-默认配置-application-properties"><a href="#一、使用-springboot-默认配置-application-properties" class="headerlink" title="一、使用 springboot 默认配置 application.properties"></a>一、使用 springboot 默认配置 application.properties</h5><p><img src="/2020/07/05/springboot2-x%E5%86%85%E7%BD%AEtomcat%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F/properties.JPG" alt="properties"></p>
<p>application.properties 里面的配置是 springboot 默认加载的，只要在里面指定 tomcat 的端口号等配置即可。</p>
<h5 id="二、使用注解进行配置"><a href="#二、使用注解进行配置" class="headerlink" title="二、使用注解进行配置"></a>二、使用注解进行配置</h5><p><img src="/2020/07/05/springboot2-x%E5%86%85%E7%BD%AEtomcat%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F/annotation.JPG" alt="annotation"></p>
<p>如图在 config 目录下新建一个类对内嵌的 Tomcat 进配置。</p>
<h5 id="可执行-jar-包"><a href="#可执行-jar-包" class="headerlink" title="可执行 jar 包"></a>可执行 jar 包</h5><p>直接使用 maven 进行打包，在classpath 目录下生成 jar 包。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar XXXX.jar</span><br></pre></td></tr></table></figure>

<p>再使用命令行使用即可。</p>
<h5 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h5><p>springboot 2.x 把 tomcat 内置了，不需要外置的 servlet 容器，可以在程序中直接使用 debug 模式运行，默认是运行在内嵌的 tomcat 上。如果项目需要发布打包出去，打包成可执行 jar 包即可。如果需要使用外置的容器，需要排除内嵌的 tomcat 容器，可以参考教程: <a href="https://www.cnblogs.com/mbblog/p/12145958.html" target="_blank" rel="noopener">https://www.cnblogs.com/mbblog/p/12145958.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>自己动手实现一个简易的JVM</title>
    <url>/2020/06/10/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E7%9A%84JVM/</url>
    <content><![CDATA[<p>看过了一遍深入理解 JVM，我决定动手实践一下，于是花了一周左右的时间写了一个半残的玩具 JVM，但也深刻体会了 JVM 的一些知识，加深了我对 JVM 的理解。</p>
<a id="more"></a>


<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>学习 JVM，用 Java 写一个可以跑的起来的 JVM 玩具，目前看来，只能算是半残的玩具…</p>
<p>项目地址：<a href="https://gitee.com/jeavenwong/SimpleJVM" target="_blank" rel="noopener">SimpleJVM</a></p>
<h4 id="JVM-的架构图"><a href="#JVM-的架构图" class="headerlink" title="JVM 的架构图"></a>JVM 的架构图</h4><p><img src="/2020/06/10/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E7%9A%84JVM/JVMSTRUCTURE.png" alt="JVMSTRUCTURE"></p>
<h4 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h4><ul>
<li>操作系统: Windows 10 </li>
<li>jdk: Zulu OpenJDK 1.8.0_252</li>
<li>build: Maven 3.3.9</li>
</ul>
<h4 id="模块介绍"><a href="#模块介绍" class="headerlink" title="模块介绍"></a>模块介绍</h4><ul>
<li>jvm-principle 模块是一个简易的虚拟机指令执行方式的demo，也是虚拟机最核心的逻辑。实现了 stack-based,rgister-based,stack and resgister hybrid 这三种方式的指令执行方式。</li>
<li>jvm-core 模块计划实现 jvm 读取 classfile 进行解析，实现类加载机制，根据字节码来解释执行。</li>
<li>jvm-tools 模块计划实现一些额外的功能，比如支持 AOT 编译，将源代码编译成机器码；以及 JIT 编译，将字节码编译成机器码。</li>
<li>因为实现 GC 的性价比太低，所以就看书学习吧，不实现了。（也没时间实现）</li>
<li>如果做的快的话，可以用 ANTLR 实现 java 编译器前端 javac（应该没时间实现了）</li>
</ul>
<h4 id="预计实现功能"><a href="#预计实现功能" class="headerlink" title="预计实现功能"></a>预计实现功能</h4><ul>
<li>实现 classfile 的解析。(50％)</li>
<li>实现类加载机制。(40％)</li>
<li>实现字节码的解释执行。(30％)</li>
<li>实现多线程。(0％) </li>
<li>实现 jvm-tools 的功能。(0％)</li>
</ul>
<h4 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h4><p>花了一周左右的时间，我写的 JVM 太渣了，没有肝下去，只能算搭了一个简易的框架demo出来，只能运行最最最简单的字节码，如果大家想要体会下动手写  JVM 的快感，可以参考大佬的代码，当然也可以参考我的代码（如果你看的下去可以重构）。</p>
<ul>
<li>目前只实现了屈指可数的简单的指令，复杂的指令，比如 invokevirtual, getstatic都没有实现，当然实现完全是体力活，没有时间做了，以后有机会补上吧。</li>
<li>深刻理解了 JVM 方法调用的过程，虚拟机栈，栈帧，操作数栈，局部变量表。</li>
<li>简单模拟了类加载的双亲委派机制，感觉很简单。</li>
<li>体会了 native 方法实现原理。</li>
<li>没有实现类的构造方法的执行、类的静态变量初始化、静态块的初始化、父类和接口的方法调用等，肝不动。</li>
<li>没有实现 rt.jar 中的类以及一些常见的类，没有时间肝。</li>
<li>很想自己从 javac 编译器前端一直写到后端 JIT，太可惜了，以后有机会再补上吧。</li>
</ul>
<h4 id="主要参考"><a href="#主要参考" class="headerlink" title="主要参考"></a>主要参考</h4><p><a href="https://gitee.com/guxingke" target="_blank" rel="noopener">孤星可</a>  大佬开源的项目 <a href="https://gitee.com/guxingke/mini-jvm/" target="_blank" rel="noopener">mini-jvm</a></p>
<h4 id="少一些功利主义的追求，多一些不为什么的执著，祝大家都能实现自己的梦想！！！"><a href="#少一些功利主义的追求，多一些不为什么的执著，祝大家都能实现自己的梦想！！！" class="headerlink" title="少一些功利主义的追求，多一些不为什么的执著，祝大家都能实现自己的梦想！！！"></a>少一些功利主义的追求，多一些不为什么的执著，祝大家都能实现自己的梦想！！！</h4>]]></content>
  </entry>
  <entry>
    <title>推荐一款强大的markdown软件Typora</title>
    <url>/2020/05/18/%E6%8E%A8%E8%8D%90%E4%B8%80%E6%AC%BE%E5%BC%BA%E5%A4%A7%E7%9A%84markdown%E8%BD%AF%E4%BB%B6Typora/</url>
    <content><![CDATA[<p>引用一下<a href="https://www.typora.io/" target="_blank" rel="noopener">官网</a>的介绍<br>Typora gives you a seamless experience as both a reader and a writer. It removes the preview window, mode switcher, syntax symbols of markdown source code, and all other unnecessary distractions. Instead, it provides a real live preview feature to help you concentrate on the content itself.</p>
<a id="more"></a>

<p>百度翻译如下<br>Typora给你一个读者和作家的无缝体验。它删除了预览窗口、模式切换程序、标记源代码的语法符号以及所有其他不必要的干扰。相反，它提供了一个真正的实时预览功能，帮助您专注于内容本身。</p>
<p>百度翻译的有点蹩脚，大致意思懂了就行。核心意思就是，<strong>Typora 是一个可以实时渲染的markdown软件</strong>，使用者可以在一边写markdown一边看到效果，而不是像 MarkdownPad 等其他 markdown 编辑软件那样分成两块，一块是源码区，一块是效果区。</p>
<p>其实 <strong>Typora 类似于浏览器</strong>，因为它可以将 markdown 解释成 html，同时可以采用 css 来定制样式，里面的很多功能都是通过 JavaScript 的库来实现的，比如我下面要说的<u>时序图</u>，<u>流程图</u>以及<u>脑图</u>。</p>
<h3 id="Typora-的功能"><a href="#Typora-的功能" class="headerlink" title="Typora 的功能"></a>Typora 的功能</h3><p>Typora 作为 markdown 的编辑器当然支持完善的 markdown 的语法，至于支持的 markdown 的常见的语法就不赘述了。<a href="https://www.jianshu.com/p/191d1e21f7ed/" target="_blank" rel="noopener">这里随便找了篇介绍 markdown 语法的简书博客</a></p>
<h3 id="为什么推荐-Typora-？"><a href="#为什么推荐-Typora-？" class="headerlink" title="为什么推荐 Typora ？"></a>为什么推荐 Typora ？</h3><ul>
<li>开源，简洁无广告，无弹窗，可纯净安装。</li>
<li>实时预览，提高效率也更酷。</li>
<li>实时保存，不需要再按 ctrl + s 了，可以改掉坏习惯了 。[笑]</li>
<li>可自由定制，熟悉前端的人可以修改 css，不熟悉的官网提供了大量的主题。</li>
<li>数学公式和作图十分方便。可以支持 LaTex/Tex 语法，也就是排版数学公式更加方便。</li>
</ul>
<h3 id="以作图为例"><a href="#以作图为例" class="headerlink" title="以作图为例"></a>以作图为例</h3><p><strong>时序图（sequence）</strong></p>
<p>Typora 通过 <a href="https://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">js-sequence-diagram插件</a> 支持了sequence 图，比如我画一个简单的 TCP 三次握手的时序图。</p>
<p><img src="/2020/05/18/%E6%8E%A8%E8%8D%90%E4%B8%80%E6%AC%BE%E5%BC%BA%E5%A4%A7%E7%9A%84markdown%E8%BD%AF%E4%BB%B6Typora/sequence.png" alt="sequence demo"></p>
<p>实现代码如下，快捷方式就是打 “ ``` “  + “sequence” + 回车  </p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Client -&gt; Server: TCP 第一次握手</span><br><span class="line">Server -&gt; Client: TCP 第二次握手</span><br><span class="line">Client -&gt; Server: TCP 第三次握手</span><br></pre></td></tr></table></figure>



<p><strong>流程图（flowchart）</strong></p>
<p>Typora 通过 <a href="http://flowchart.js.org/" target="_blank" rel="noopener">flowchart.js插件</a> 支持了sequence 图。举个简单的例子，如下。</p>
<p><img src="/2020/05/18/%E6%8E%A8%E8%8D%90%E4%B8%80%E6%AC%BE%E5%BC%BA%E5%A4%A7%E7%9A%84markdown%E8%BD%AF%E4%BB%B6Typora/flowchart.png" alt="flowchart demo"></p>
<p>实现代码如下，快捷方式就是打 “ ``` “  + “flow” + 回车  </p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 程序开始</span><br><span class="line">op=&gt;operation: 进行操作</span><br><span class="line">cn=&gt;condition: 判断对错?</span><br><span class="line">ed=&gt;end: 结束</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cn(yes)-&gt;ed</span><br><span class="line">cn(no)-&gt;op</span><br></pre></td></tr></table></figure>





<p><strong>脑图（mind map）</strong></p>
<p>Typora 通过 <a href="https://mermaid-js.github.io/mermaid/#/" target="_blank" rel="noopener">mermaid 插件</a> 支持了sequence 图，这个插件很强大，也可以画时序图和流程图。举个简单的例子，如下。</p>
<p><img src="/2020/05/18/%E6%8E%A8%E8%8D%90%E4%B8%80%E6%AC%BE%E5%BC%BA%E5%A4%A7%E7%9A%84markdown%E8%BD%AF%E4%BB%B6Typora/mindmap1.png" alt="mind map demo"></p>
<p>实现代码如下，快捷方式就是打 “ ``` “  + “mermaid” + 回车  </p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A(Java后端技术栈) --&gt; B(编程基础)</span><br><span class="line">B --&gt; b0(数据结构)</span><br><span class="line">B --&gt; b1(操作系统)</span><br><span class="line">B --&gt; b2(计算机网络)</span><br><span class="line">B --&gt; b3(编译原理)</span><br><span class="line">B --&gt; b4(计算机组成原理)</span><br><span class="line"></span><br><span class="line">A --&gt; C(编程工具)</span><br><span class="line">C --&gt; a0(Intellij IDEA)</span><br><span class="line">C --&gt; a1(Eclipse)</span><br><span class="line">C --&gt; a2(VS Code)</span><br><span class="line">C --&gt; a3(编辑器 + 编译器)</span><br><span class="line"></span><br><span class="line">A --&gt; D(开发框架)</span><br><span class="line">D --&gt; d0(Spring Boot)</span><br><span class="line">D --&gt; d1(Spring Cloud)</span><br><span class="line">D --&gt; d2(Dubbo)</span><br></pre></td></tr></table></figure>



<p><strong>排版（layout）</strong></p>
<p>还有写作时候需要的排版，因为 Typora 相当于一个浏览器所以可以使用 html 的语法，所以基本上是熟悉 html 可以实现任何你想要实现的排版效果。下面举一个图片并列排版的例子。</p>
<p>因为 markdown 默认的插入图片的代码无法调整图片的大小和位置，所以可以采用 html 中的 img 标签。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">...</span>](<span class="link">....</span>)</span><br></pre></td></tr></table></figure>

<p>效果图如下</p>
<p><img src="/2020/05/18/%E6%8E%A8%E8%8D%90%E4%B8%80%E6%AC%BE%E5%BC%BA%E5%A4%A7%E7%9A%84markdown%E8%BD%AF%E4%BB%B6Typora/pic_layout_demo.png" alt="pic_layout_demo"></p>
<p>上述效果实现代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">figure</span> <span class="attr">class</span>=<span class="string">"half"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"C:/Users/jeave/Desktop/pic/123.jpg"</span> <span class="attr">width</span>=<span class="string">"350px"</span> <span class="attr">height</span>=<span class="string">"300px"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"C:/Users/jeave/Desktop/pic/vs.jpg"</span> <span class="attr">width</span>=<span class="string">"350px"</span> <span class="attr">height</span>=<span class="string">"300px"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figure</span> <span class="attr">class</span>=<span class="string">"half"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"C:/Users/jeave/Desktop/pic/image.jpg"</span> <span class="attr">width</span>=<span class="string">"350px"</span> <span class="attr">height</span>=<span class="string">"300px"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"C:/Users/jeave/Desktop/pic/vs1.jpg"</span> <span class="attr">width</span>=<span class="string">"350px"</span> <span class="attr">height</span>=<span class="string">"300px"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过 figure 标签的 half 样式可以达到图片并列排版的目的，中间的文字在空行里打即可。</p>
<p>总之作为一名程序员，熟悉 markdown 是必须的事情，熟练使用 markdown 无疑会带来很多便利，增加很多效率。</p>
]]></content>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>我的个人博客</title>
    <url>/2020/05/08/hello-world/</url>
    <content><![CDATA[<p>使用 gitee pages 或者 github pages 挂自己的博客的主要初衷，就是因为简洁可定制。</p>
<a id="more"></a>

<p>我喜欢看的两个大佬的博客，收藏一下 URL 。</p>
<p>第一个是 vczh ，江湖人称 “轮子哥”，他对编译原理理解的深度非常人所及，他的博客中关于编译原理的博文结合具体实例，写的很好。</p>
<p>链接：<a href="http://www.cppblog.com/vczh/" target="_blank" rel="noopener"> http://www.cppblog.com/vczh/ </a></p>
<p>第二个是王垠，非常有个性，争议也很大，对 PL 的研究非常深入，对计算机的一些知识的研究也很深入，会结合自己的理解进行一些输出，可以看看他的博文提高思想深度。</p>
<p>链接：<a href="http://www.yinwang.org/" target="_blank" rel="noopener"> http://www.yinwang.org/ </a></p>
]]></content>
      <tags>
        <tag>默认hexo模板landscape</tag>
      </tags>
  </entry>
  <entry>
    <title>简单四则运算解释器的实现</title>
    <url>/2020/05/06/%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E8%A7%A3%E9%87%8A%E5%99%A8/</url>
    <content><![CDATA[<h4 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h4><p>以前简单学过编译原理的理论知识，但是由于太过抽象，平时用到的机会也不多，所以很多都遗忘了，为了能简单拾起一些最最基本的知识，于是决定写一个 Lexer 程序和 Parser程序。</p>
<a id="more"></a>

<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p><strong>词法分析</strong>:<br>所谓的词法分析，就是把输入的文本(源代码)中每一个单独的字符(词素)组装成一个个单词token(语素)，这些token里可以有表示符id，标点符号，保留字，运算符等。这个过程是通过正则表达式来完成的。而词法分析器在具体的编程实现上可以先写正则表达式，然后用抽象的正则表达式来转换为nfa，再从nfa转换为dfa，实现中就使用dfa来实现分词。当然也可以直接使用高级语言的正则表达式功能，每个token都写一个正则表达式，排列匹配的正则表达式的优先级，然后每次加一长度对字符串进行匹配，但这样的话，效率可能不如直接写dfa高，所以一般词法分析都是自己人工通过预先设定的保留字，id，运算符，标点符号等词来构建dfa(确定有穷自动机)，其中涉及到的算法就是 RE -&gt; NFA -&gt; DFA 的转换算法。正则表达式引擎就是用nfa/dfa来实现的。</p>
<p><strong>语法分析</strong>:<br>一般文法按照表达能力接近自然语言的程度，可以分为正则文法，上下文无关文法(cfg)，上下文有关文法(csg)，递归可枚举文法。现在大多数的编程语言都是上下文有关语法(全局变量)，但语法分析的时候都使用上下文无关文法来进行分析。语法分析的输入就是词法分析得到的token序列，通过自己构造的上下文无关文法来对token序列进行语法分析。有两种思路，第一种分析思路是从顶向下分析，即推导，即从非终结符开始推导，看看能不能根据规定的文法从非终结符推导出给定的句子，如果可以推导出那就是符合规定的文法，这个句子就是语法正确的。这个自顶向下分析的过程可以基于数据表驱动来进行分析，也可以使用简单粗暴的递归下降法进行分析，本质都是基于栈的分析。第二种分析思路是，从底向上分析，即规约，看看是否可以由句子来根据规定的文法来规约到非终结符。一般，parser的具体实现中，第一种思路实现起来更加方便快速，所以现在大多数的编程语言的语法分析都是自顶向下分析的。第一种中比较简单也最常用的就是使用LL(1)型文法来进行语法分析，c语言就使用可回溯的LL(1)型文法进行分析，但LL(1)要求一般不能出现左递归。如果第二种的话，常用的是LR型文法及算法，如果第一种思路无法解决语法分析的话就使用LR算法。一般来说，语法分析可以一边分析一边递归的构造出每个ast节点，最终分析结束可以得到一颗ast(抽象语法树)。之后，可以直接对ast解释执行，也可以通过ast生成中间表示IR，前者做法简单快速但速度效率可能较慢，后者做法就是解释器常见的做法，IR一般可以是字节码，比如java的字节码，然后由jvm解释执行。</p>
<p><strong>语义分析:</strong><br>对上一步语法分析得到的ast进行分析，做一些操作，比如类型检查等。验证符合语法的句子是否符合上下文语义。</p>
<p><strong>代码优化:</strong><br>可以省去，大概是可以根据代码对一些冗余或者重复的代码进行优化，还有寄存器级别的优化等。</p>
<p><strong>代码生成:</strong><br>进行完语义分析后，根据ast可以进行递归下降生成到目标语言，如果直接生成机器语言，那需要对二进制格式以及寄存器很熟。</p>
<p><strong>自动分析工具</strong>:<br>主语言是java，可以玩一下antlr。</p>
<h4 id="闲话"><a href="#闲话" class="headerlink" title="闲话"></a>闲话</h4><p>其实在学习生活过程中遇到编译知识的几率还是蛮高的（除了专业编译器研究人员和使用词法语法分析的工具外），比如，正则表达式，DFA（确定的有穷自动机）这些在一些常见算法（如KMP算法）里都多多少少会有所体现。再比如，在笔者本科的时候，数电里很经典的有穷状态机（FSM）其实就是 DFA，还有用 Verilog HDL 写 FPGA 的实验中经常需要自己构建有穷的状态，这也是 DFA 的应用。正则表达式就不用提了，应用就太广了，相信没有人没有接触过 RE（正则表达式）。</p>
<p>为了简单起见，使用正则表达式来做字符串中关键字的匹配，以及使用 DFA 来分析词素构建 token 语素。词法分析结束之后我会选择 CFG（上下文无关语法）中最常见最简单的没有左递归的 LL(1) 型文法来做语法分析，做法尽可能的简单，可以选择直接基于数据表来做，也可能会使用递归下降法来做解析。语法分析结束可以输出一个语法分析树。</p>
<p>知乎某位大佬曾经说过，如果一个程序员不是专门做编译器的开发工作，那他 对编译原理主要掌握以下几点就够用了：词法分析方面，掌握正则表达式，了解dfa/nfa。Parsing 方面，能读懂 BNF，知道AST，会写简单的递归下降 parser，会用 antlr 之类的 parser generator。 优化方面，知道现代编译器的优化能力有多强，知道如何配合编译器写出高效易读的代码，避免试图outsmart编译器。会实现简单的虚拟机（stack-based，不带GC），并把四则运算表达式翻译为虚拟机指令。<br>ANTLR是一个神器，关于ANTLR的入门教程：<br><a href="https://www.cntofu.com/book/115/readme.html" target="_blank" rel="noopener">https://www.cntofu.com/book/115/readme.html</a></p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>实现了一个四则运算的解释器，即仅支持 + - * / 等四个二元运算符，然后不支持定义变量，支持数字，包括浮点数和整数。 </p>
<h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><h5 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h5><p>词法分析使用的是正则文法，也就是正则表达式，所以先写出需要使用的正则表达式，然后再根据正则表达式构造出 NFA ，之后再将NFA转化为 DFA ，依据  DFA  进行状态机的编码，就可以读入输入文件进行词法分析了。其实正则表达式构造 NFA 的算法是比较麻烦的，但是这里不支持保留字，标识符，标点符号等，所以分词比较简单，下面直接可以画出 DFA。</p>
<p><img src="/2020/05/06/%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E8%A7%A3%E9%87%8A%E5%99%A8/DFA.jpg" alt="DFA图示"></p>
<p>下面是词法分析程序的输入，也是整个程序的输入。</p>
<p><img src="/2020/05/06/%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E8%A7%A3%E9%87%8A%E5%99%A8/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E7%A8%8B%E5%BA%8F%E8%BE%93%E5%85%A5.jpg" alt="词法分析程序输入"></p>
<p>下面是词法分析程序的输出，即 token（语素） 序列。</p>
<p><img src="/2020/05/06/%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E8%A7%A3%E9%87%8A%E5%99%A8/tokens.jpg" alt="输出Token"></p>
<h5 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h5><p>语法分析程序的输入是词法分析程序的输出，即 token 序列。</p>
<p>不考虑语法制导翻译的话，语法分析输出的都应该是一颗抽象语法树 AST ，这个结构比较抽象。下面我手画一个。</p>
<p><img src="/2020/05/06/%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E8%A7%A3%E9%87%8A%E5%99%A8/AST.jpg" alt="AST结构图"></p>
<p>语法分析中，最麻烦的莫过于构造 LL(1) 文法了，如下图所示。</p>
<p><img src="/2020/05/06/%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E8%A7%A3%E9%87%8A%E5%99%A8/LL(1)%E6%96%87%E6%B3%95%E6%9E%84%E9%80%A0.jpg" alt="LL(1)文法构造"></p>
<p>语法分析中如果遇见语法错误会进行错误的提示，然后表明当前的代码是语法错误的，比如我刻意去掉上面输入的表达式中的右括号，程序结果如下图所示。</p>
<p><img src="/2020/05/06/%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E8%A7%A3%E9%87%8A%E5%99%A8/%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF.jpg" alt="语法错误"></p>
<p>当语法分析正确后，表明我们的表达式是符合语法的，之后我们可以根据这颗 AST 来做任何操作，比如可以由前序遍历得到正序的token序列，后序遍历可以得到逆波兰表达式，可以用来模拟基于栈进行程序的执行。理论上，AST 可以转化为任何一种IR（中间表示），比如转化为 java 字节码，由 JVM 解释执行，也可以直接用 AST 解释执行。</p>
<p>最后就是用代码简单的模拟一下 Stack-Based VM （这类虚拟机的代表就是JVM），然后基于栈来执行指令代码，即用逆波兰表达式进和栈进行计算。</p>
<p>下图是 VM 程序执行指令的输出。</p>
<p><img src="/2020/05/06/%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E8%A7%A3%E9%87%8A%E5%99%A8/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.jpg" alt="运行结果"></p>
<h4 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h4><p>我觉得整个过程中，写 DFA 来词法解析很死板，在实际中应该会基于正则表达式来进行 DFA 的生成，龙书那么复杂的过程其实也是用来写生成词法分析程序的工具。做语法分析的难点就是构造LL(1)文法，而且还得消除左递归，否则不能用递归下降法进行文法分析，还有更麻烦的语法分析的方法就是对语法进行Fisrt-Fellow集分析得到一个预测表（parser table），根据表来进行文法分析，输入是文法规则文件和表文件，相比较之下，递归下降法更加简单高效。这个项目非常简单，但作为简单实践下编译原理的理论知识还是可以的，麻雀虽小五脏俱全嘛。但是本项目其实只是做了编译器的前端，后端的代码优化和代码生成和汇编指令啥的对于我这样的后端程序员也很重要。</p>
<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><p>我将源代码放在了 gitee 上面，仓库链接如下。<br><a href="https://gitee.com/jeavenwong/SimpleJInterpreter" target="_blank" rel="noopener">https://gitee.com/jeavenwong/SimpleJInterpreter</a></p>
<p>我又基于 ANTLR 实现了四则运算的第二版，果然 ANTLR 这款 parser 生成器配合 Vistor 以及 Listener 两种 Parser Tree 的遍历方式很强大，还能够直接处理 LL(*) 文法的左递归。下面是第二版的源码仓库链接。<br><a href="https://gitee.com/jeavenwong/SimpleJInterpreterV2" target="_blank" rel="noopener">https://gitee.com/jeavenwong/SimpleJInterpreterV2</a>  </p>
]]></content>
      <tags>
        <tag>编译原理</tag>
        <tag>词法分析</tag>
        <tag>语法分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Aspect失效排查记录</title>
    <url>/2020/03/29/Spring-Aspect%E5%A4%B1%E6%95%88%E6%8E%92%E6%9F%A5%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>本文记录一个低级错误导致 sping boot 切面失效的bug。</p>
<a id="more"></a>

<p>在使用Spring Aspect拦截Controller某方法打印日志的时候，突然发现AOP失效了，拦截方法正常执行，但是定义的切面并没有正常执行，IDEA 里面没有提示任何错误信息，可以引用到被拦截的目标方法上去。仔细检查了一遍代码，发现切面定义的类不是Class，而是Aspect。</p>
<h4 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h4><p>我使用 maven 导入了AOP之后，在创建新的切面类的时候，点了创建Aspect。</p>
<p><img src="/2020/03/29/Spring-Aspect%E5%A4%B1%E6%95%88%E6%8E%92%E6%9F%A5%E8%AE%B0%E5%BD%95/introduce_aop_support.JPG" alt="introduce_aop_support"></p>
<p><img src="/2020/03/29/Spring-Aspect%E5%A4%B1%E6%95%88%E6%8E%92%E6%9F%A5%E8%AE%B0%E5%BD%95/abnormal_create_aspect.png" alt="abnormal_create_aspect"></p>
<p>然后创建的不是Class，而是Aspect…这就导致了代码没问题但是却无效的bug。</p>
<h4 id="反思："><a href="#反思：" class="headerlink" title="反思："></a>反思：</h4><p>在找到错误后，将 “ Aspect “ 改为 “ Class ”后，切面可以正常生效。</p>
<p><img src="/2020/03/29/Spring-Aspect%E5%A4%B1%E6%95%88%E6%8E%92%E6%9F%A5%E8%AE%B0%E5%BD%95/spring_boot_introduce_aop_auto.JPG" alt="spring_boot_introduce_aop_auto"></p>
<p>如上图所示，spring-boot-starter-aop 引入了一系列的依赖，这些依赖相当于是 IDEA 的对Aspect的增强插件，IDEA 可以在新建文件时提供一个直接创建 Aspect 的选项，但是不能用 javac 编译器进行编译，要使用 Ajc 编译器，需要在 IDEA compliler 设置里指定 Ajc 的文件位置。</p>
<p><img src="/2020/03/29/Spring-Aspect%E5%A4%B1%E6%95%88%E6%8E%92%E6%9F%A5%E8%AE%B0%E5%BD%95/aspect_plugin_config.png" alt="aspect_plugin_config"></p>
<p>指定 Ajc 编译器后按照 Aspect 的语法写好后编译运行。</p>
<p>至此，我把 “ Aspect “ 改为 “ Class “就可以使切面生效了。</p>
<p><img src="/2020/03/29/Spring-Aspect%E5%A4%B1%E6%95%88%E6%8E%92%E6%9F%A5%E8%AE%B0%E5%BD%95/normal_aspect.JPG" alt="normal_aspect"></p>
<p>这里还需要注意的一点是：</p>
<p>spring boot 在使用 Aspect 类大的时候，如果使用 @Aspect 这样的 Java Config 的方式而不使用 XML 来配置切面的话，就需要额外的在切面类的加上 @component 注解，这个如果没有加上，也会导致spring boot找不到切面类的 bean。</p>
<p>加 @component 的原因官方解释如下：</p>
<p><em>You may register aspect classes as regular beans in your Spring XML configuration, or autodetect them through classpath scanning - just like any other Spring-managed bean. However, note that the @Aspect annotation is not sufficient for autodetection in the classpath: For that purpose, you need to add a separate @Component annotation (or alternatively a custom stereotype annotation that qualifies, as per the rules of Spring’s component scanner).</em></p>
<p><em>您可以在Spring XML配置中注册aspect类，或者通过类路径扫描自动检测它们，就像任何其他Spring管理bean一样。但是，请注意，@aspect注释对于在类路径中自动检测是不够的：为了达到这个目的，您需要添加一个单独的@component注解（或者根据Spring的组件扫描器的规则来定义一个定制的原型注解）。</em></p>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Aspect</tag>
      </tags>
  </entry>
  <entry>
    <title>simple study the principle of git</title>
    <url>/2020/03/28/simple-study-the-principle-of-git/</url>
    <content><![CDATA[<p>git 作为程序员经常使用的分布式版本控制工具，知其然也应该知其所以然，所以我们来浅谈下git的原理。</p>
<p><em>申明：本文不是原创，更多的记录下 git 的知识，文章尾部有参考文章链接。</em></p>
<a id="more"></a>

<p>我们经常使用的命令有如下几个：</p>
<p><code>git pull</code></p>
<p><code>git clone</code></p>
<p><code>git add</code> </p>
<p><code>git commit</code> </p>
<p><code>git push</code></p>
<p><code>...</code></p>
<p>那我们就选择几个关键且常用的命令来探究下内部的原理。</p>
<p>git 的基本对象有三个，blob 对象，tree 对象和 commit 对象，这个可以了解下。</p>
<p>git 的工作空间，暂存区和git仓库等概念可以自行了解下，如图所示。</p>
<p><img src="/2020/03/28/simple-study-the-principle-of-git/git_workspace_show.JPG" alt="git_workspace_show"></p>
<p>这是一个使用 git 管理的项目目录，你可以认为，其中 .git 目录就是本地 git 仓库。而 .git 目录下的index 就是工作暂存区。目录中除 .git 以外的空间就是用户工作目录，是用户在操作系统的文件目录下可以实实在在操作的文件集。</p>
<p>假设工作空间里有我们创建编辑好的各个文件，当我们执行 <code>git add .</code>命令后，git 本地仓库中会多出来一些 Blob 对象。</p>
<p><img src="/2020/03/28/simple-study-the-principle-of-git/p1s1.png" alt="blob object"></p>
<p>这些 blob 对象的内容是对用户空间里文件内容进行二进制加密压缩，而 blob 对象的名字就是文件内容的 sha1 算法得到大的 hash 值（这个也是每个 blob 对象唯一的ID）。</p>
<p>接着，我们执行 <code>git commit -m &#39;test&#39;</code>命令。</p>
<p><img src="/2020/03/28/simple-study-the-principle-of-git/p1s2.png" alt="tree object"></p>
<p>执行完 <code>git commit</code>命令后，首先会在 git 仓库里创建一个对应当前 blob 对象的 目录结构的 tree  对象。tree 对象的内容是一个目录索引，存放的是指向的各个 blob 对象的 ID ，还有 blob 对象对应的工作空间文件的名字和权限等信息。tree 对象的 ID 就是 tree 对象的内容的 hash 值。</p>
<p>然后，git 还会在 git 仓库里创建一个 commit 对象。</p>
<p><img src="/2020/03/28/simple-study-the-principle-of-git/p1s3.png" alt="commit object"></p>
<p>这个 commit 对象可以看作是当前项目的一个快照（snapshot），每个 commit 对象里都对应着一个版本，实际上，git 就是通过操作 “commit 链” 来进行版本的切换的。commit 对象里存放的是 tree 对象的信息，当前认证的作者的信息，提交者的信息以及提交 commit 的内容等。commit 对象的 ID 是commit 对象内容的 hash 值。</p>
<p>当然，如下图所示，git 对 commit 的操作是通过分支来进行的，所以会有分支来指向 commit 对象，master 默认是主分支。</p>
<p><img src="/2020/03/28/simple-study-the-principle-of-git/p1s4.png" alt="head_master_show"></p>
<p>至此，git 的基本原理就大致略知一二了， git是储存一个文件的内容、目录结构、commit信息和分支的。<strong>其本质上是一个key-value的数据库加上默克尔树形成的有向无环图（DAG）</strong> ，对 git 的版本控制就是在 ”commit 链“上来回移动。</p>
<p>下图展示了 git 操作的完整过程。</p>
<p><img src="/2020/03/28/simple-study-the-principle-of-git/p2s3.gif" alt="dynamic process of git"></p>
<p>非常有意思的是，git 采用默克尔树的结构可以防止被人篡改文件，任何人想要更改其中某个文件而不被其他人发现的话，就必须得篡改 git 仓库中所有的文件，因为所有的文件的 ID 也就是 hash 值都是关联在一起。当然，如果有人对你远端的 git中央仓库 执行了 <code>git pull</code>  或者 <code>git clone</code> 命令，那他就有了一个完整的未被篡改的 git 仓库，这样就构成了分布式。这样的设计也决定了基本没人可以恶意篡改一个有影响力的 git 仓库，即使未经说明篡改了历史被人发现，那也会遭到别人的鄙视。</p>
<p>git 的原理其实很复杂，指令也相当繁杂，如果想要深入学习 git 的原理，那就得花更多得时间去看书和思考。</p>
<p>大家一致认同的剖析 git 原理的好书，<a href="https://book.douban.com/subject/3420144/" target="_blank" rel="noopener">《Pro Git》</a></p>
<p>本文基本是全部借鉴了 <a href="https://www.lzane.com/" target="_blank" rel="noopener">lazne大佬</a>的这篇文章中的图。这篇文章讲的深入浅出，<a href="https://www.lzane.com/tech/git-internal/" target="_blank" rel="noopener">参考文章传送门</a>。</p>
<p>还有bilibili讲解的视频：<a href="https://www.bilibili.com/video/BV1RJ411X7kh" target="_blank" rel="noopener">探究git原理</a></p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Use Valine and LeanCloud to build Comment System</title>
    <url>/2020/03/28/Use-Valine-and-LeanCloud-to-build-Comment-System/</url>
    <content><![CDATA[<p>原始的hexo的模板landscape是没有评论系统的，我们可以自己定制一个评论系统。</p>
<a id="more"></a>

<p>可以使用 github 或者 gitee（码云）建一个第三方应用来做博客系统，但是样式不够简洁，而且评论者需要登录 github 或者 gitee账号，这里我们选用一个免费的开源博客系统 Valine，并且 Valine 默认使用云存储平台 LeanCloud 来做评论的存储，LeanCloud的开发版的存储是免费的。</p>
<p>Valine 的初始配置详细见官网：</p>
<p>注册 LeanCloud 并获得了 AppID 和 AppKey 之后就可以对 landscape 进行配置了。</p>
<p>编辑 <code>/themes/landscape/layout/_partial/</code>目录下的<code>article.ejs</code>，将原本配置gitment时添加在最后的那段代码删掉，添加： </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (!index)&#123; %&gt;</span><br><span class="line">  &lt;% <span class="keyword">if</span> (post.comments)&#123; %&gt;</span><br><span class="line">    &lt;div id=<span class="string">"vcomments"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="/</span><span class="regexp">/cdn1.lncld.net/</span><span class="keyword">static</span>/js/<span class="number">3.0</span><span class="number">.4</span>/av-min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script src='//unpkg.com/valine/dist/Valine.min.js'&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">        new Valine(&#123;</span></span><br><span class="line"><span class="string">            el: '#vcomments',</span></span><br><span class="line"><span class="string">            appId: '你的appid',</span></span><br><span class="line"><span class="string">            appKey: '你的appkey',</span></span><br><span class="line"><span class="string">            notify:true, </span></span><br><span class="line"><span class="string">            verify:true, </span></span><br><span class="line"><span class="string">            visitor:true,</span></span><br><span class="line"><span class="string">            avatar:'mm', </span></span><br><span class="line"><span class="string">            placeholder: '嘻嘻嘻' </span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;% &#125; else &#123; %&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>vcomments<span class="string">"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;% &#125; %&gt;</span></span><br><span class="line"><span class="string">&lt;% &#125; %&gt;</span></span><br></pre></td></tr></table></figure>

<p>之后，用 hexo 重新编译然后上传到 gitee pages 即可。</p>
<p>运行效果图如下：</p>
<p><img src="/2020/03/28/Use-Valine-and-LeanCloud-to-build-Comment-System/valine_demo.JPG" alt="效果图"></p>
<p>参考链接：<a href="https://www.cnblogs.com/zmj97/p/10180732.html" target="_blank" rel="noopener">将hexo的评论系统由gitment改为Valine</a></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用hexo发布文章</title>
    <url>/2020/03/28/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h6 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h6><p>​    个人博客的好处多多，不仅可以记录下自己的学习过程中的踩坑经历，也可以写下自己的所思所想。</p>
<a id="more"></a>

<p>搭建博客的方式其实很多，比如，本人是主攻 Java Web后端方向，可以采用 Spring Boot + MyBatis + Mysql + Docker 来搭建博客后台，用 jQuery/Bootstrap/Vue.js + node.js 来做博客的前台，这样的技术栈来实现一个单机版的个人博客的难度应该不会很大，主要就是付出时间和精力来coding 和 debug。但是考虑到要配置部署博客，购买服务器、域名，甚至购买HTTPS的证书等，这些都是需要投入钱和时间来做，出了问题还得定位问题来 debug，还得做好博客备份。所以个人感觉要维护一个高质量的个人博客要花费很多精力和金钱，这性价比并不高。</p>
<p>​    国内有很多优秀的博客平台，博客园 / CSDN  等，CSDN 不仅广告多，而且这几年质量下滑的严重，博客园允许个人定制页面的样式，但是定制受限，往往也不够简洁。出于想要做一个没有侧边栏广告且简洁明了的个人博客的初衷，选定了 github pages 来托管自己的静态博客，可是国内访问 github 的速度受限，为了体验更好于是选择了相似的国产的 gitee pages 来托管博客，Hexo 是一个比较成熟的博客框架，gitee pages 也支持，可以实现静态博客的 SSR (Server Side Render)。</p>
<p>​    本文就记录下日常使用hexo的方式。</p>
<p>首先在本地安装node.js，之后安装包管理器npm，这里省略具体过程</p>
<ol>
<li><p>使用npm下载hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo</span><br></pre></td></tr></table></figure>
</li>
<li><p>用hexo生成博客根目录的source/_post目录下新的markdown文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new</span><br></pre></td></tr></table></figure>

<p> 或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑生成的 markdown 文件的内容即可，这里推荐 Typora 软件</p>
<p>在 blog 根目录下的 _config.yml 把 post_asset_foler:false 修改为 true 后，上一步会生成一个同名文件夹，在里面可以放置图片素材</p>
<p>因为下载了如下相关插件，所以引用直接是图片名称即可，如 test.jpg 而不是 xxx/test.jpg</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/7ym0n/hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<p>记得在发布文章的时候如果想要在主页显示折叠的文章，记得在 md 文件里添加下面的标签</p>
<p>hex o提供的   <code>&lt;!-- more --&gt;</code>  </p>
<p><em>注意：不能写在除了标题外的正文第一行，否则无效</em></p>
<p><img src="/2020/03/28/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/more_essay_test.JPG" alt="折叠文章操作图"></p>
<p><img src="/2020/03/28/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/more_essay_show.JPG" alt="折叠文章效果图"></p>
</li>
<li><p>清空之前生成的 css 等样式文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
</li>
<li><p>生产新的样式文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>
</li>
<li><p>部署文章同步到 gitee pages 仓库的 {username} 仓库上即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果想要在本地预览的话，可以执行下面的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p> 或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>我在 gitee 新建了一个 <a href="https://gitee.com/jeavenwong/blog" target="_blank" rel="noopener">repo</a> 来同步自己本地的 blog 文件，所以得记得及时 push.</p>
<p>如下图所示</p>
<p><img src="/2020/03/28/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/hexo_server_demo.JPG" alt="hexo_server_demo"></p>
<p>之后在浏览器输入localhost:4000即可在本地预览博客</p>
<p><img src="/2020/03/28/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/chrome_access_demo.JPG" alt="chrome_access_demo"></p>
</li>
</ol>
<p>这里吐槽一下，虽然在国内访问 gitee 比 github 快，但是 gitee 个人版每次从本地同步博客之后，都需要在 <a href="https://gitee.com/jeavenwong/jeavenwong" target="_blank" rel="noopener">gitee page 应用</a> 仓库里手动点击 pages 服务来进行更新。</p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>发布博客</tag>
      </tags>
  </entry>
</search>
